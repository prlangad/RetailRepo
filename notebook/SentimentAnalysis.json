{
	"name": "SentimentAnalysis",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SentAnalysis",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8c6f25db-f073-4452-b9d6-fc558dd22006"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/84250dee-75c1-4b9d-99c7-ec9f76781510/resourceGroups/Adatum/providers/Microsoft.Synapse/workspaces/adatumcorp/bigDataPools/SentAnalysis",
				"name": "SentAnalysis",
				"type": "Spark",
				"endpoint": "https://adatumcorp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SentAnalysis",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import mmlspark\n",
					"if mmlspark.__spark_package_version__ < \"1.0.0-rc3\":\n",
					"    raise Exception(\"This notebook is not compatible with the current version of mmlspark: {}. Please upgrade to 1.0.0-rc3 or higher.\".format(\n",
					"        mmlspark.__spark_package_version__))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from mmlspark.cognitive import *\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql.functions import explode\n",
					"\n",
					"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\n",
					"service_key = mssparkutils.credentials.getSecret(\"nellies-keyvault\", \"textsecret\", \"NGKeyvault\")\n",
					"\n",
					"# Load the data into a Spark DataFrame\n",
					"df = spark.sql(\"SELECT * FROM default.accountsentiments\")\n",
					"\n",
					"sentiment = (TextSentiment()\n",
					"    .setLocation(\"eastus\")\n",
					"    .setSubscriptionKey(service_key)\n",
					"    .setOutputCol(\"output\")\n",
					"    .setErrorCol(\"error\")\n",
					"    .setLanguage(\"en\")\n",
					"    .setTextCol(\"pr_review_content\"))\n",
					"\n",
					"results = sentiment.transform(df)\n",
					"\n",
					"# Show the results\n",
					"display(results\\\n",
					"    .select(\"pr_review_content\", explode(\"output\").alias(\"exploded\"), \"error\")\\\n",
					"    .select(\"pr_review_content\", \"exploded.*\", \"error\")\\\n",
					"    .limit(100))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<br>\n",
					"<br>\n",
					"<img src=\"https://buildspark.blob.core.windows.net/build/PieChart.png\" alt=\"Pie Chart\" width=\"150%\" style=\"float:left;\"/> \n",
					"<br>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import udf, col\n",
					"from pyspark.sql.types import DoubleType\n",
					"\n",
					"#UDF for translating sentiment text to a score\n",
					"def sentiment_to_score(sentiment):\n",
					"    if sentiment == \"positive\":\n",
					"        return 1.0\n",
					"    elif sentiment == \"negative\":\n",
					"        return -1.0\n",
					"    elif sentiment == \"mixed\":\n",
					"        return 0.0\n",
					"    elif sentiment ==\"neutral\":\n",
					"        return 0.0\n",
					"    else:\n",
					"        raise ValueError(\"Unknown sentiment: {}\".format(sentiment))"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Using UDF to set sentiment scored that can be summarized\n",
					"\n",
					"new_results = results\\\n",
					"    .select(\"pr_review_content\", \"cr709_salespersonid\",  explode(\"output\").alias(\"exploded\"), \"error\")\\\n",
					"    .select(\"pr_review_content\", \"cr709_salespersonid\", \"exploded.*\", \"error\")\\\n",
					"    .withColumn(\"sentimentScore\", udf(sentiment_to_score, DoubleType())(col(\"sentiment\")))\\\n",
					"    .select(\"pr_review_content\", \"cr709_salespersonid\", \"sentimentScore\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(new_results.limit(100))"
				],
				"execution_count": 12
			}
		]
	}
}